// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: o5/deployer/v1/topic/aws_cf.proto

package deployer_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudFormationRequestTopic_CreateNewStack_FullMethodName    = "/o5.deployer.v1.topic.CloudFormationRequestTopic/CreateNewStack"
	CloudFormationRequestTopic_UpdateStack_FullMethodName       = "/o5.deployer.v1.topic.CloudFormationRequestTopic/UpdateStack"
	CloudFormationRequestTopic_DeleteStack_FullMethodName       = "/o5.deployer.v1.topic.CloudFormationRequestTopic/DeleteStack"
	CloudFormationRequestTopic_ScaleStack_FullMethodName        = "/o5.deployer.v1.topic.CloudFormationRequestTopic/ScaleStack"
	CloudFormationRequestTopic_CancelStackUpdate_FullMethodName = "/o5.deployer.v1.topic.CloudFormationRequestTopic/CancelStackUpdate"
	CloudFormationRequestTopic_StabalizeStack_FullMethodName    = "/o5.deployer.v1.topic.CloudFormationRequestTopic/StabalizeStack"
)

// CloudFormationRequestTopicClient is the client API for CloudFormationRequestTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudFormationRequestTopicClient interface {
	CreateNewStack(ctx context.Context, in *CreateNewStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStack(ctx context.Context, in *UpdateStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteStack(ctx context.Context, in *DeleteStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ScaleStack(ctx context.Context, in *ScaleStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelStackUpdate(ctx context.Context, in *CancelStackUpdateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StabalizeStack(ctx context.Context, in *StabalizeStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudFormationRequestTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudFormationRequestTopicClient(cc grpc.ClientConnInterface) CloudFormationRequestTopicClient {
	return &cloudFormationRequestTopicClient{cc}
}

func (c *cloudFormationRequestTopicClient) CreateNewStack(ctx context.Context, in *CreateNewStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_CreateNewStack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudFormationRequestTopicClient) UpdateStack(ctx context.Context, in *UpdateStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_UpdateStack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudFormationRequestTopicClient) DeleteStack(ctx context.Context, in *DeleteStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_DeleteStack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudFormationRequestTopicClient) ScaleStack(ctx context.Context, in *ScaleStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_ScaleStack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudFormationRequestTopicClient) CancelStackUpdate(ctx context.Context, in *CancelStackUpdateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_CancelStackUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudFormationRequestTopicClient) StabalizeStack(ctx context.Context, in *StabalizeStackMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationRequestTopic_StabalizeStack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudFormationRequestTopicServer is the server API for CloudFormationRequestTopic service.
// All implementations must embed UnimplementedCloudFormationRequestTopicServer
// for forward compatibility
type CloudFormationRequestTopicServer interface {
	CreateNewStack(context.Context, *CreateNewStackMessage) (*emptypb.Empty, error)
	UpdateStack(context.Context, *UpdateStackMessage) (*emptypb.Empty, error)
	DeleteStack(context.Context, *DeleteStackMessage) (*emptypb.Empty, error)
	ScaleStack(context.Context, *ScaleStackMessage) (*emptypb.Empty, error)
	CancelStackUpdate(context.Context, *CancelStackUpdateMessage) (*emptypb.Empty, error)
	StabalizeStack(context.Context, *StabalizeStackMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudFormationRequestTopicServer()
}

// UnimplementedCloudFormationRequestTopicServer must be embedded to have forward compatible implementations.
type UnimplementedCloudFormationRequestTopicServer struct {
}

func (UnimplementedCloudFormationRequestTopicServer) CreateNewStack(context.Context, *CreateNewStackMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewStack not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) UpdateStack(context.Context, *UpdateStackMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStack not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) DeleteStack(context.Context, *DeleteStackMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStack not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) ScaleStack(context.Context, *ScaleStackMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleStack not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) CancelStackUpdate(context.Context, *CancelStackUpdateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStackUpdate not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) StabalizeStack(context.Context, *StabalizeStackMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StabalizeStack not implemented")
}
func (UnimplementedCloudFormationRequestTopicServer) mustEmbedUnimplementedCloudFormationRequestTopicServer() {
}

// UnsafeCloudFormationRequestTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudFormationRequestTopicServer will
// result in compilation errors.
type UnsafeCloudFormationRequestTopicServer interface {
	mustEmbedUnimplementedCloudFormationRequestTopicServer()
}

func RegisterCloudFormationRequestTopicServer(s grpc.ServiceRegistrar, srv CloudFormationRequestTopicServer) {
	s.RegisterService(&CloudFormationRequestTopic_ServiceDesc, srv)
}

func _CloudFormationRequestTopic_CreateNewStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewStackMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).CreateNewStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_CreateNewStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).CreateNewStack(ctx, req.(*CreateNewStackMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudFormationRequestTopic_UpdateStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStackMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).UpdateStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_UpdateStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).UpdateStack(ctx, req.(*UpdateStackMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudFormationRequestTopic_DeleteStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStackMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).DeleteStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_DeleteStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).DeleteStack(ctx, req.(*DeleteStackMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudFormationRequestTopic_ScaleStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleStackMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).ScaleStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_ScaleStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).ScaleStack(ctx, req.(*ScaleStackMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudFormationRequestTopic_CancelStackUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStackUpdateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).CancelStackUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_CancelStackUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).CancelStackUpdate(ctx, req.(*CancelStackUpdateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudFormationRequestTopic_StabalizeStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StabalizeStackMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationRequestTopicServer).StabalizeStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationRequestTopic_StabalizeStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationRequestTopicServer).StabalizeStack(ctx, req.(*StabalizeStackMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudFormationRequestTopic_ServiceDesc is the grpc.ServiceDesc for CloudFormationRequestTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudFormationRequestTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.deployer.v1.topic.CloudFormationRequestTopic",
	HandlerType: (*CloudFormationRequestTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewStack",
			Handler:    _CloudFormationRequestTopic_CreateNewStack_Handler,
		},
		{
			MethodName: "UpdateStack",
			Handler:    _CloudFormationRequestTopic_UpdateStack_Handler,
		},
		{
			MethodName: "DeleteStack",
			Handler:    _CloudFormationRequestTopic_DeleteStack_Handler,
		},
		{
			MethodName: "ScaleStack",
			Handler:    _CloudFormationRequestTopic_ScaleStack_Handler,
		},
		{
			MethodName: "CancelStackUpdate",
			Handler:    _CloudFormationRequestTopic_CancelStackUpdate_Handler,
		},
		{
			MethodName: "StabalizeStack",
			Handler:    _CloudFormationRequestTopic_StabalizeStack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/deployer/v1/topic/aws_cf.proto",
}

const (
	CloudFormationReplyTopic_StackStatusChanged_FullMethodName = "/o5.deployer.v1.topic.CloudFormationReplyTopic/StackStatusChanged"
)

// CloudFormationReplyTopicClient is the client API for CloudFormationReplyTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudFormationReplyTopicClient interface {
	StackStatusChanged(ctx context.Context, in *StackStatusChangedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudFormationReplyTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudFormationReplyTopicClient(cc grpc.ClientConnInterface) CloudFormationReplyTopicClient {
	return &cloudFormationReplyTopicClient{cc}
}

func (c *cloudFormationReplyTopicClient) StackStatusChanged(ctx context.Context, in *StackStatusChangedMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudFormationReplyTopic_StackStatusChanged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudFormationReplyTopicServer is the server API for CloudFormationReplyTopic service.
// All implementations must embed UnimplementedCloudFormationReplyTopicServer
// for forward compatibility
type CloudFormationReplyTopicServer interface {
	StackStatusChanged(context.Context, *StackStatusChangedMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudFormationReplyTopicServer()
}

// UnimplementedCloudFormationReplyTopicServer must be embedded to have forward compatible implementations.
type UnimplementedCloudFormationReplyTopicServer struct {
}

func (UnimplementedCloudFormationReplyTopicServer) StackStatusChanged(context.Context, *StackStatusChangedMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StackStatusChanged not implemented")
}
func (UnimplementedCloudFormationReplyTopicServer) mustEmbedUnimplementedCloudFormationReplyTopicServer() {
}

// UnsafeCloudFormationReplyTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudFormationReplyTopicServer will
// result in compilation errors.
type UnsafeCloudFormationReplyTopicServer interface {
	mustEmbedUnimplementedCloudFormationReplyTopicServer()
}

func RegisterCloudFormationReplyTopicServer(s grpc.ServiceRegistrar, srv CloudFormationReplyTopicServer) {
	s.RegisterService(&CloudFormationReplyTopic_ServiceDesc, srv)
}

func _CloudFormationReplyTopic_StackStatusChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackStatusChangedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudFormationReplyTopicServer).StackStatusChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudFormationReplyTopic_StackStatusChanged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudFormationReplyTopicServer).StackStatusChanged(ctx, req.(*StackStatusChangedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudFormationReplyTopic_ServiceDesc is the grpc.ServiceDesc for CloudFormationReplyTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudFormationReplyTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.deployer.v1.topic.CloudFormationReplyTopic",
	HandlerType: (*CloudFormationReplyTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StackStatusChanged",
			Handler:    _CloudFormationReplyTopic_StackStatusChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/deployer/v1/topic/aws_cf.proto",
}
