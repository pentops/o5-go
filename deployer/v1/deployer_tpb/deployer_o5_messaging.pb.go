// Code generated by Bprotoc-gen-go-o5-messaging . DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/deployer/v1/topic/deployer.proto

package deployer_tpb

import (
	context "context"
	messaging_pb "github.com/pentops/o5-go/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging.go/o5msg"
)

// Service: DeploymentRequestTopic
type DeploymentRequestTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewDeploymentRequestTopicSender[C any](sender o5msg.Sender[C]) *DeploymentRequestTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.deployer.v1.topic.DeploymentRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "RequestDeployment",
				Message: (*RequestDeploymentMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeploymentRequestTopicSender[C]{Sender: sender}
}

type DeploymentRequestTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewDeploymentRequestTopicCollector[C any](collector o5msg.Collector[C]) *DeploymentRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.deployer.v1.topic.DeploymentRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "RequestDeployment",
				Message: (*RequestDeploymentMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeploymentRequestTopicCollector[C]{Collector: collector}
}

// Method: RequestDeployment

func (msg *RequestDeploymentMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.deployer.v1.topic.DeploymentRequestTopic",
		GrpcMethod:       "RequestDeployment",
		Headers:          map[string]string{},
		DestinationTopic: "o5-deployer-input_request",
	}
	return header
}

func (send DeploymentRequestTopicSender[C]) RequestDeployment(ctx context.Context, sendContext C, msg *RequestDeploymentMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect DeploymentRequestTopicCollector[C]) RequestDeployment(sendContext C, msg *RequestDeploymentMessage) {
	collect.Collector.Collect(sendContext, msg)
}

// Service: DeploymentReplyTopic
type DeploymentReplyTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewDeploymentReplyTopicSender[C any](sender o5msg.Sender[C]) *DeploymentReplyTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.deployer.v1.topic.DeploymentReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "DeploymentStatus",
				Message: (*DeploymentStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeploymentReplyTopicSender[C]{Sender: sender}
}

type DeploymentReplyTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewDeploymentReplyTopicCollector[C any](collector o5msg.Collector[C]) *DeploymentReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.deployer.v1.topic.DeploymentReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "DeploymentStatus",
				Message: (*DeploymentStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeploymentReplyTopicCollector[C]{Collector: collector}
}

// Method: DeploymentStatus

func (msg *DeploymentStatusMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.deployer.v1.topic.DeploymentReplyTopic",
		GrpcMethod:       "DeploymentStatus",
		Headers:          map[string]string{},
		DestinationTopic: "o5-deployer-output_reply",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send DeploymentReplyTopicSender[C]) DeploymentStatus(ctx context.Context, sendContext C, msg *DeploymentStatusMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect DeploymentReplyTopicCollector[C]) DeploymentStatus(sendContext C, msg *DeploymentStatusMessage) {
	collect.Collector.Collect(sendContext, msg)
}
