// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package deployer_pb

import (
	context "context"
	fmt "fmt"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	proto "google.golang.org/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// StateObjectOptions: StackPSM
type StackPSM = psm.StateMachine[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
]

type StackPSMDB = psm.DBStateMachine[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
]

type StackPSMEventer = psm.Eventer[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
]

func DefaultStackPSMConfig() *psm.StateMachineConfig[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
	](StackPSMConverter{}, DefaultStackPSMTableSpec)
}

func NewStackPSM(config *psm.StateMachineConfig[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
]) (*StackPSM, error) {
	return psm.NewStateMachine[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
	](config)
}

type StackPSMTableSpec = psm.PSMTableSpec[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
]

var DefaultStackPSMTableSpec = StackPSMTableSpec{
	State: psm.TableSpec[*StackState]{
		TableName:  "stack",
		DataColumn: "state",
		StoreExtraColumns: func(state *StackState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"stack_id",
		},
	},
	Event: psm.TableSpec[*StackEvent]{
		TableName:  "stack_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *StackEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":        metadata.EventId,
				"timestamp": metadata.Timestamp,
				"actor":     metadata.Actor,
				"stack_id":  event.StackId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.event_id",
		},
		PK: func(event *StackEvent) (map[string]interface{}, error) {
			return map[string]interface{}{
				"id": event.Metadata.EventId,
			}, nil
		},
	},
	PrimaryKey: func(event *StackEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.StackId,
		}, nil
	},
}

type StackPSMTransitionBaton = psm.TransitionBaton[*StackEvent, StackPSMEvent]
type StackPSMHookBaton = psm.StateHookBaton[*StackEvent, StackPSMEvent]

func StackPSMFunc[SE StackPSMEvent](cb func(context.Context, StackPSMTransitionBaton, *StackState, SE) error) psm.PSMCombinedFunc[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
	SE,
] {
	return psm.PSMCombinedFunc[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
		SE,
	](cb)
}
func StackPSMTransition[SE StackPSMEvent](cb func(context.Context, *StackState, SE) error) psm.PSMTransitionFunc[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
	SE,
] {
	return psm.PSMTransitionFunc[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
		SE,
	](cb)
}
func StackPSMHook[SE StackPSMEvent](cb func(context.Context, sqrlx.Transaction, StackPSMHookBaton, *StackState, SE) error) psm.PSMHookFunc[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
	SE,
] {
	return psm.PSMHookFunc[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
		SE,
	](cb)
}
func StackPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, *StackState, *StackEvent) error) psm.GeneralStateHook[
	*StackState,
	StackStatus,
	*StackEvent,
	StackPSMEvent,
] {
	return psm.GeneralStateHook[
		*StackState,
		StackStatus,
		*StackEvent,
		StackPSMEvent,
	](cb)
}

type StackPSMEventKey = string

const (
	StackPSMEventNil                 StackPSMEventKey = "<nil>"
	StackPSMEventConfigured          StackPSMEventKey = "configured"
	StackPSMEventTriggered           StackPSMEventKey = "triggered"
	StackPSMEventDeploymentCompleted StackPSMEventKey = "deployment_completed"
	StackPSMEventDeploymentFailed    StackPSMEventKey = "deployment_failed"
	StackPSMEventAvailable           StackPSMEventKey = "available"
)

type StackPSMEvent interface {
	proto.Message
	PSMEventKey() StackPSMEventKey
}

type StackPSMConverter struct{}

func (c StackPSMConverter) EmptyState(e *StackEvent) *StackState {
	return &StackState{
		StackId: e.StackId,
	}
}

func (c StackPSMConverter) DeriveChainEvent(e *StackEvent, systemActor psm.SystemActor, eventKey string) *StackEvent {
	metadata := &EventMetadata{
		EventId:   systemActor.NewEventID(e.Metadata.EventId, eventKey),
		Timestamp: timestamppb.Now(),
	}
	actorProto := systemActor.ActorProto()
	refl := metadata.ProtoReflect()
	refl.Set(refl.Descriptor().Fields().ByName("actor"), actorProto)
	return &StackEvent{
		Metadata: metadata,
		StackId:  e.StackId,
	}
}

func (c StackPSMConverter) CheckStateKeys(s *StackState, e *StackEvent) error {
	if s.StackId != e.StackId {
		return fmt.Errorf("state field 'StackId' %q does not match event field %q", s.StackId, e.StackId)
	}
	return nil
}

func (etw *StackEventType) UnwrapPSMEvent() StackPSMEvent {
	if etw == nil {
		return nil
	}
	switch v := etw.Type.(type) {
	case *StackEventType_Configured_:
		return v.Configured
	case *StackEventType_Triggered_:
		return v.Triggered
	case *StackEventType_DeploymentCompleted_:
		return v.DeploymentCompleted
	case *StackEventType_DeploymentFailed_:
		return v.DeploymentFailed
	case *StackEventType_Available_:
		return v.Available
	default:
		return nil
	}
}
func (etw *StackEventType) PSMEventKey() StackPSMEventKey {
	tt := etw.UnwrapPSMEvent()
	if tt == nil {
		return StackPSMEventNil
	}
	return tt.PSMEventKey()
}
func (etw *StackEventType) SetPSMEvent(inner StackPSMEvent) {
	switch v := inner.(type) {
	case *StackEventType_Configured:
		etw.Type = &StackEventType_Configured_{Configured: v}
	case *StackEventType_Triggered:
		etw.Type = &StackEventType_Triggered_{Triggered: v}
	case *StackEventType_DeploymentCompleted:
		etw.Type = &StackEventType_DeploymentCompleted_{DeploymentCompleted: v}
	case *StackEventType_DeploymentFailed:
		etw.Type = &StackEventType_DeploymentFailed_{DeploymentFailed: v}
	case *StackEventType_Available:
		etw.Type = &StackEventType_Available_{Available: v}
	default:
		panic("invalid type")
	}
}

func (ee *StackEvent) PSMEventKey() StackPSMEventKey {
	return ee.Event.PSMEventKey()
}

func (ee *StackEvent) UnwrapPSMEvent() StackPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}

func (ee *StackEvent) SetPSMEvent(inner StackPSMEvent) {
	if ee.Event == nil {
		ee.Event = &StackEventType{}
	}
	ee.Event.SetPSMEvent(inner)
}

func (*StackEventType_Configured) PSMEventKey() StackPSMEventKey {
	return StackPSMEventConfigured
}
func (*StackEventType_Triggered) PSMEventKey() StackPSMEventKey {
	return StackPSMEventTriggered
}
func (*StackEventType_DeploymentCompleted) PSMEventKey() StackPSMEventKey {
	return StackPSMEventDeploymentCompleted
}
func (*StackEventType_DeploymentFailed) PSMEventKey() StackPSMEventKey {
	return StackPSMEventDeploymentFailed
}
func (*StackEventType_Available) PSMEventKey() StackPSMEventKey {
	return StackPSMEventAvailable
}
