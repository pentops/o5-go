// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package deployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// StackEventType is a oneof wrapper
type StackEventTypeKey string

const (
	StackEvent_Triggered           StackEventTypeKey = "triggered"
	StackEvent_DeploymentCompleted StackEventTypeKey = "deploymentCompleted"
	StackEvent_DeploymentFailed    StackEventTypeKey = "deploymentFailed"
	StackEvent_Available           StackEventTypeKey = "available"
)

func (x *StackEventType) TypeKey() (StackEventTypeKey, bool) {
	switch x.Type.(type) {
	case *StackEventType_Triggered_:
		return StackEvent_Triggered, true
	case *StackEventType_DeploymentCompleted_:
		return StackEvent_DeploymentCompleted, true
	case *StackEventType_DeploymentFailed_:
		return StackEvent_DeploymentFailed, true
	case *StackEventType_Available_:
		return StackEvent_Available, true
	default:
		return "", false
	}
}

type IsStackEventTypeWrappedType interface {
	TypeKey() StackEventTypeKey
}

func (x *StackEventType) Set(val IsStackEventTypeWrappedType) {
	switch v := val.(type) {
	case *StackEventType_Triggered:
		x.Type = &StackEventType_Triggered_{Triggered: v}
	case *StackEventType_DeploymentCompleted:
		x.Type = &StackEventType_DeploymentCompleted_{DeploymentCompleted: v}
	case *StackEventType_DeploymentFailed:
		x.Type = &StackEventType_DeploymentFailed_{DeploymentFailed: v}
	case *StackEventType_Available:
		x.Type = &StackEventType_Available_{Available: v}
	}
}
func (x *StackEventType) Get() IsStackEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *StackEventType_Triggered_:
		return v.Triggered
	case *StackEventType_DeploymentCompleted_:
		return v.DeploymentCompleted
	case *StackEventType_DeploymentFailed_:
		return v.DeploymentFailed
	case *StackEventType_Available_:
		return v.Available
	default:
		return nil
	}
}
func (x *StackEventType_Triggered) TypeKey() StackEventTypeKey {
	return StackEvent_Triggered
}
func (x *StackEventType_DeploymentCompleted) TypeKey() StackEventTypeKey {
	return StackEvent_DeploymentCompleted
}
func (x *StackEventType_DeploymentFailed) TypeKey() StackEventTypeKey {
	return StackEvent_DeploymentFailed
}
func (x *StackEventType_Available) TypeKey() StackEventTypeKey {
	return StackEvent_Available
}

type IsStackEventType_Type = isStackEventType_Type

// StackStatus
const (
	StackStatus_UNSPECIFIED StackStatus = 0
	StackStatus_CREATING    StackStatus = 1
	StackStatus_STABLE      StackStatus = 2
	StackStatus_AVAILABLE   StackStatus = 3
	StackStatus_MIGRATING   StackStatus = 4
	StackStatus_BROKEN      StackStatus = 5
)

var (
	StackStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "CREATING",
		2: "STABLE",
		3: "AVAILABLE",
		4: "MIGRATING",
		5: "BROKEN",
	}
	StackStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"CREATING":    1,
		"STABLE":      2,
		"AVAILABLE":   3,
		"MIGRATING":   4,
		"BROKEN":      5,
	}
	StackStatus_value_either = map[string]int32{
		"UNSPECIFIED":              0,
		"STACK_STATUS_UNSPECIFIED": 0,
		"CREATING":                 1,
		"STACK_STATUS_CREATING":    1,
		"STABLE":                   2,
		"STACK_STATUS_STABLE":      2,
		"AVAILABLE":                3,
		"STACK_STATUS_AVAILABLE":   3,
		"MIGRATING":                4,
		"STACK_STATUS_MIGRATING":   4,
		"BROKEN":                   5,
		"STACK_STATUS_BROKEN":      5,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StackStatus) ShortString() string {
	return StackStatus_name_short[int32(x)]
}
func (x StackStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StackStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StackStatus_value_either[strVal]
	*x = StackStatus(val)
	return nil
}
