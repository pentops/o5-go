// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package deployer_pb

// ParameterSourceType is a oneof wrapper
type ParameterSourceTypeKey string

const (
	ParameterSource_Static       ParameterSourceTypeKey = "static"
	ParameterSource_WellKnown    ParameterSourceTypeKey = "wellKnown"
	ParameterSource_RulePriority ParameterSourceTypeKey = "rulePriority"
	ParameterSource_DesiredCount ParameterSourceTypeKey = "desiredCount"
	ParameterSource_CrossEnvSns  ParameterSourceTypeKey = "crossEnvSns"
	ParameterSource_EnvVar       ParameterSourceTypeKey = "envVar"
)

func (x *ParameterSourceType) TypeKey() (ParameterSourceTypeKey, bool) {
	switch x.Type.(type) {
	case *ParameterSourceType_Static_:
		return ParameterSource_Static, true
	case *ParameterSourceType_WellKnown_:
		return ParameterSource_WellKnown, true
	case *ParameterSourceType_RulePriority_:
		return ParameterSource_RulePriority, true
	case *ParameterSourceType_DesiredCount_:
		return ParameterSource_DesiredCount, true
	case *ParameterSourceType_CrossEnvSns_:
		return ParameterSource_CrossEnvSns, true
	case *ParameterSourceType_EnvVar_:
		return ParameterSource_EnvVar, true
	default:
		return "", false
	}
}

type IsParameterSourceTypeWrappedType interface {
	TypeKey() ParameterSourceTypeKey
}

func (x *ParameterSourceType) Set(val IsParameterSourceTypeWrappedType) {
	switch v := val.(type) {
	case *ParameterSourceType_Static:
		x.Type = &ParameterSourceType_Static_{Static: v}
	case *ParameterSourceType_WellKnown:
		x.Type = &ParameterSourceType_WellKnown_{WellKnown: v}
	case *ParameterSourceType_RulePriority:
		x.Type = &ParameterSourceType_RulePriority_{RulePriority: v}
	case *ParameterSourceType_DesiredCount:
		x.Type = &ParameterSourceType_DesiredCount_{DesiredCount: v}
	case *ParameterSourceType_CrossEnvSns:
		x.Type = &ParameterSourceType_CrossEnvSns_{CrossEnvSns: v}
	case *ParameterSourceType_EnvVar:
		x.Type = &ParameterSourceType_EnvVar_{EnvVar: v}
	}
}
func (x *ParameterSourceType) Get() IsParameterSourceTypeWrappedType {
	switch v := x.Type.(type) {
	case *ParameterSourceType_Static_:
		return v.Static
	case *ParameterSourceType_WellKnown_:
		return v.WellKnown
	case *ParameterSourceType_RulePriority_:
		return v.RulePriority
	case *ParameterSourceType_DesiredCount_:
		return v.DesiredCount
	case *ParameterSourceType_CrossEnvSns_:
		return v.CrossEnvSns
	case *ParameterSourceType_EnvVar_:
		return v.EnvVar
	default:
		return nil
	}
}
func (x *ParameterSourceType_Static) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_Static
}
func (x *ParameterSourceType_WellKnown) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_WellKnown
}
func (x *ParameterSourceType_RulePriority) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_RulePriority
}
func (x *ParameterSourceType_DesiredCount) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_DesiredCount
}
func (x *ParameterSourceType_CrossEnvSns) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_CrossEnvSns
}
func (x *ParameterSourceType_EnvVar) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_EnvVar
}

type IsParameterSourceType_Type = isParameterSourceType_Type
