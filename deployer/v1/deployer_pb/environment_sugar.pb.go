// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package deployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// EnvironmentEventType is a oneof wrapper
type EnvironmentEventTypeKey string

const (
	EnvironmentEvent_Configured EnvironmentEventTypeKey = "configured"
)

func (x *EnvironmentEventType) TypeKey() (EnvironmentEventTypeKey, bool) {
	switch x.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return EnvironmentEvent_Configured, true
	default:
		return "", false
	}
}

type IsEnvironmentEventTypeWrappedType interface {
	TypeKey() EnvironmentEventTypeKey
}

func (x *EnvironmentEventType) Set(val IsEnvironmentEventTypeWrappedType) {
	switch v := val.(type) {
	case *EnvironmentEventType_Configured:
		x.Type = &EnvironmentEventType_Configured_{Configured: v}
	}
}
func (x *EnvironmentEventType) Get() IsEnvironmentEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return v.Configured
	default:
		return nil
	}
}
func (x *EnvironmentEventType_Configured) TypeKey() EnvironmentEventTypeKey {
	return EnvironmentEvent_Configured
}

type IsEnvironmentEventType_Type = isEnvironmentEventType_Type

// EnvironmentStatus
const (
	EnvironmentStatus_UNSPECIFIED EnvironmentStatus = 0
	EnvironmentStatus_ACTIVE      EnvironmentStatus = 1
)

var (
	EnvironmentStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
	}
	EnvironmentStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
	}
	EnvironmentStatus_value_either = map[string]int32{
		"UNSPECIFIED":                    0,
		"ENVIRONMENT_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                         1,
		"ENVIRONMENT_STATUS_ACTIVE":      1,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x EnvironmentStatus) ShortString() string {
	return EnvironmentStatus_name_short[int32(x)]
}
func (x EnvironmentStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *EnvironmentStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := EnvironmentStatus_value_either[strVal]
	*x = EnvironmentStatus(val)
	return nil
}
