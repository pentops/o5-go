// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package deployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

type IsDeploymentEventType_Type = isDeploymentEventType_Type

// DeploymentStatus
const (
	DeploymentStatus_UNSPECIFIED    DeploymentStatus = 0
	DeploymentStatus_QUEUED         DeploymentStatus = 1
	DeploymentStatus_LOCKED         DeploymentStatus = 2
	DeploymentStatus_WAITING        DeploymentStatus = 3
	DeploymentStatus_AVAILABLE      DeploymentStatus = 4
	DeploymentStatus_SCALING_DOWN   DeploymentStatus = 5
	DeploymentStatus_SCALED_DOWN    DeploymentStatus = 6
	DeploymentStatus_INFRA_MIGRATE  DeploymentStatus = 7
	DeploymentStatus_INFRA_MIGRATED DeploymentStatus = 8
	DeploymentStatus_DB_MIGRATING   DeploymentStatus = 9
	DeploymentStatus_DB_MIGRATED    DeploymentStatus = 10
	DeploymentStatus_SCALING_UP     DeploymentStatus = 11
	DeploymentStatus_SCALED_UP      DeploymentStatus = 12
	DeploymentStatus_DONE           DeploymentStatus = 100
	DeploymentStatus_FAILED         DeploymentStatus = 101
)

var (
	DeploymentStatus_name_short = map[int32]string{
		0:   "UNSPECIFIED",
		1:   "QUEUED",
		2:   "LOCKED",
		3:   "WAITING",
		4:   "AVAILABLE",
		5:   "SCALING_DOWN",
		6:   "SCALED_DOWN",
		7:   "INFRA_MIGRATE",
		8:   "INFRA_MIGRATED",
		9:   "DB_MIGRATING",
		10:  "DB_MIGRATED",
		11:  "SCALING_UP",
		12:  "SCALED_UP",
		100: "DONE",
		101: "FAILED",
	}
	DeploymentStatus_value_short = map[string]int32{
		"UNSPECIFIED":    0,
		"QUEUED":         1,
		"LOCKED":         2,
		"WAITING":        3,
		"AVAILABLE":      4,
		"SCALING_DOWN":   5,
		"SCALED_DOWN":    6,
		"INFRA_MIGRATE":  7,
		"INFRA_MIGRATED": 8,
		"DB_MIGRATING":   9,
		"DB_MIGRATED":    10,
		"SCALING_UP":     11,
		"SCALED_UP":      12,
		"DONE":           100,
		"FAILED":         101,
	}
	DeploymentStatus_value_either = map[string]int32{
		"UNSPECIFIED":                      0,
		"DEPLOYMENT_STATUS_UNSPECIFIED":    0,
		"QUEUED":                           1,
		"DEPLOYMENT_STATUS_QUEUED":         1,
		"LOCKED":                           2,
		"DEPLOYMENT_STATUS_LOCKED":         2,
		"WAITING":                          3,
		"DEPLOYMENT_STATUS_WAITING":        3,
		"AVAILABLE":                        4,
		"DEPLOYMENT_STATUS_AVAILABLE":      4,
		"SCALING_DOWN":                     5,
		"DEPLOYMENT_STATUS_SCALING_DOWN":   5,
		"SCALED_DOWN":                      6,
		"DEPLOYMENT_STATUS_SCALED_DOWN":    6,
		"INFRA_MIGRATE":                    7,
		"DEPLOYMENT_STATUS_INFRA_MIGRATE":  7,
		"INFRA_MIGRATED":                   8,
		"DEPLOYMENT_STATUS_INFRA_MIGRATED": 8,
		"DB_MIGRATING":                     9,
		"DEPLOYMENT_STATUS_DB_MIGRATING":   9,
		"DB_MIGRATED":                      10,
		"DEPLOYMENT_STATUS_DB_MIGRATED":    10,
		"SCALING_UP":                       11,
		"DEPLOYMENT_STATUS_SCALING_UP":     11,
		"SCALED_UP":                        12,
		"DEPLOYMENT_STATUS_SCALED_UP":      12,
		"DONE":                             100,
		"DEPLOYMENT_STATUS_DONE":           100,
		"FAILED":                           101,
		"DEPLOYMENT_STATUS_FAILED":         101,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x DeploymentStatus) ShortString() string {
	return DeploymentStatus_name_short[int32(x)]
}
func (x DeploymentStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *DeploymentStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := DeploymentStatus_value_either[strVal]
	*x = DeploymentStatus(val)
	return nil
}

// StackStatus
const (
	StackStatus_UNSPECIFIED   StackStatus = 0
	StackStatus_PROGRESS      StackStatus = 1
	StackStatus_COMPLETE      StackStatus = 2
	StackStatus_ROLLING_BACK  StackStatus = 3
	StackStatus_CREATE_FAILED StackStatus = 4
	StackStatus_TERMINAL      StackStatus = 5
)

var (
	StackStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "PROGRESS",
		2: "COMPLETE",
		3: "ROLLING_BACK",
		4: "CREATE_FAILED",
		5: "TERMINAL",
	}
	StackStatus_value_short = map[string]int32{
		"UNSPECIFIED":   0,
		"PROGRESS":      1,
		"COMPLETE":      2,
		"ROLLING_BACK":  3,
		"CREATE_FAILED": 4,
		"TERMINAL":      5,
	}
	StackStatus_value_either = map[string]int32{
		"UNSPECIFIED":                0,
		"STACK_STATUS_UNSPECIFIED":   0,
		"PROGRESS":                   1,
		"STACK_STATUS_PROGRESS":      1,
		"COMPLETE":                   2,
		"STACK_STATUS_COMPLETE":      2,
		"ROLLING_BACK":               3,
		"STACK_STATUS_ROLLING_BACK":  3,
		"CREATE_FAILED":              4,
		"STACK_STATUS_CREATE_FAILED": 4,
		"TERMINAL":                   5,
		"STACK_STATUS_TERMINAL":      5,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StackStatus) ShortString() string {
	return StackStatus_name_short[int32(x)]
}
func (x StackStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StackStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StackStatus_value_either[strVal]
	*x = StackStatus(val)
	return nil
}
