// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package deployer_pb

import (
	context "context"
	fmt "fmt"
	psm "github.com/pentops/protostate/psm"
	proto "google.golang.org/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// StateObjectOptions: DeploymentPSM
type DeploymentPSMEventer = psm.Eventer[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

type DeploymentPSM = psm.StateMachine[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

type DeploymentPSMDB = psm.DBStateMachine[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

func DefaultDeploymentPSMConfig() *psm.StateMachineConfig[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
	](DeploymentPSMConverter{}, DefaultDeploymentPSMTableSpec)
}

func NewDeploymentPSM(config *psm.StateMachineConfig[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]) (*DeploymentPSM, error) {
	return psm.NewStateMachine[
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
	](config)
}

type DeploymentPSMTableSpec = psm.TableSpec[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

var DefaultDeploymentPSMTableSpec = DeploymentPSMTableSpec{
	StateTable: "deployment",
	EventTable: "deployment_event",
	PrimaryKey: func(event *DeploymentEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.DeploymentId,
		}, nil
	},
	StateColumns: func(state *DeploymentState) (map[string]interface{}, error) {
		return map[string]interface{}{}, nil
	},
	EventColumns: func(event *DeploymentEvent) (map[string]interface{}, error) {
		metadata := event.Metadata
		return map[string]interface{}{
			"id":            metadata.EventId,
			"timestamp":     metadata.Timestamp,
			"actor":         metadata.Actor,
			"deployment_id": event.DeploymentId,
		}, nil
	},
	EventPrimaryKeyFieldPaths: []string{
		"metadata.event_id",
	},
	StatePrimaryKeyFieldPaths: []string{
		"deployment_id",
	},
}

type DeploymentPSMTransitionBaton = psm.TransitionBaton[*DeploymentEvent, DeploymentPSMEvent]

func DeploymentPSMFunc[SE DeploymentPSMEvent](cb func(context.Context, DeploymentPSMTransitionBaton, *DeploymentState, SE) error) psm.TransitionFunc[
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
	SE,
] {
	return psm.TransitionFunc[
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
		SE,
	](cb)
}

type DeploymentPSMEventKey string

const (
	DeploymentPSMEventNil              DeploymentPSMEventKey = "<nil>"
	DeploymentPSMEventCreated          DeploymentPSMEventKey = "created"
	DeploymentPSMEventTriggered        DeploymentPSMEventKey = "triggered"
	DeploymentPSMEventStackWait        DeploymentPSMEventKey = "stack_wait"
	DeploymentPSMEventStackWaitFailure DeploymentPSMEventKey = "stack_wait_failure"
	DeploymentPSMEventStackAvailable   DeploymentPSMEventKey = "stack_available"
	DeploymentPSMEventRunSteps         DeploymentPSMEventKey = "run_steps"
	DeploymentPSMEventStepResult       DeploymentPSMEventKey = "step_result"
	DeploymentPSMEventError            DeploymentPSMEventKey = "error"
	DeploymentPSMEventDone             DeploymentPSMEventKey = "done"
	DeploymentPSMEventTerminated       DeploymentPSMEventKey = "terminated"
)

type DeploymentPSMEvent interface {
	proto.Message
	PSMEventKey() DeploymentPSMEventKey
}
type DeploymentPSMConverter struct{}

func (c DeploymentPSMConverter) Unwrap(e *DeploymentEvent) DeploymentPSMEvent {
	return e.UnwrapPSMEvent()
}

func (c DeploymentPSMConverter) StateLabel(s *DeploymentState) string {
	return s.Status.String()
}

func (c DeploymentPSMConverter) EventLabel(e DeploymentPSMEvent) string {
	return string(e.PSMEventKey())
}

func (c DeploymentPSMConverter) EmptyState(e *DeploymentEvent) *DeploymentState {
	return &DeploymentState{
		DeploymentId: e.DeploymentId,
	}
}

func (c DeploymentPSMConverter) DeriveChainEvent(e *DeploymentEvent, systemActor psm.SystemActor, eventKey string) *DeploymentEvent {
	metadata := &EventMetadata{
		EventId:   systemActor.NewEventID(e.Metadata.EventId, eventKey),
		Timestamp: timestamppb.Now(),
	}
	actorProto := systemActor.ActorProto()
	refl := metadata.ProtoReflect()
	refl.Set(refl.Descriptor().Fields().ByName("actor"), actorProto)
	return &DeploymentEvent{
		Metadata:     metadata,
		DeploymentId: e.DeploymentId,
	}
}

func (c DeploymentPSMConverter) CheckStateKeys(s *DeploymentState, e *DeploymentEvent) error {
	if s.DeploymentId != e.DeploymentId {
		return fmt.Errorf("state field 'DeploymentId' %q does not match event field %q", s.DeploymentId, e.DeploymentId)
	}
	return nil
}

func (ee *DeploymentEventType) UnwrapPSMEvent() DeploymentPSMEvent {
	if ee == nil {
		return nil
	}
	switch v := ee.Type.(type) {
	case *DeploymentEventType_Created_:
		return v.Created
	case *DeploymentEventType_Triggered_:
		return v.Triggered
	case *DeploymentEventType_StackWait_:
		return v.StackWait
	case *DeploymentEventType_StackWaitFailure_:
		return v.StackWaitFailure
	case *DeploymentEventType_StackAvailable_:
		return v.StackAvailable
	case *DeploymentEventType_RunSteps_:
		return v.RunSteps
	case *DeploymentEventType_StepResult_:
		return v.StepResult
	case *DeploymentEventType_Error_:
		return v.Error
	case *DeploymentEventType_Done_:
		return v.Done
	case *DeploymentEventType_Terminated_:
		return v.Terminated
	default:
		return nil
	}
}
func (ee *DeploymentEventType) PSMEventKey() DeploymentPSMEventKey {
	tt := ee.UnwrapPSMEvent()
	if tt == nil {
		return DeploymentPSMEventNil
	}
	return tt.PSMEventKey()
}
func (ee *DeploymentEvent) PSMEventKey() DeploymentPSMEventKey {
	return ee.Event.PSMEventKey()
}
func (ee *DeploymentEvent) UnwrapPSMEvent() DeploymentPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}
func (ee *DeploymentEvent) SetPSMEvent(inner DeploymentPSMEvent) {
	if ee.Event == nil {
		ee.Event = &DeploymentEventType{}
	}
	switch v := inner.(type) {
	case *DeploymentEventType_Created:
		ee.Event.Type = &DeploymentEventType_Created_{Created: v}
	case *DeploymentEventType_Triggered:
		ee.Event.Type = &DeploymentEventType_Triggered_{Triggered: v}
	case *DeploymentEventType_StackWait:
		ee.Event.Type = &DeploymentEventType_StackWait_{StackWait: v}
	case *DeploymentEventType_StackWaitFailure:
		ee.Event.Type = &DeploymentEventType_StackWaitFailure_{StackWaitFailure: v}
	case *DeploymentEventType_StackAvailable:
		ee.Event.Type = &DeploymentEventType_StackAvailable_{StackAvailable: v}
	case *DeploymentEventType_RunSteps:
		ee.Event.Type = &DeploymentEventType_RunSteps_{RunSteps: v}
	case *DeploymentEventType_StepResult:
		ee.Event.Type = &DeploymentEventType_StepResult_{StepResult: v}
	case *DeploymentEventType_Error:
		ee.Event.Type = &DeploymentEventType_Error_{Error: v}
	case *DeploymentEventType_Done:
		ee.Event.Type = &DeploymentEventType_Done_{Done: v}
	case *DeploymentEventType_Terminated:
		ee.Event.Type = &DeploymentEventType_Terminated_{Terminated: v}
	default:
		panic("invalid type")
	}
}
func (*DeploymentEventType_Created) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventCreated
}
func (*DeploymentEventType_Triggered) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTriggered
}
func (*DeploymentEventType_StackWait) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWait
}
func (*DeploymentEventType_StackWaitFailure) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWaitFailure
}
func (*DeploymentEventType_StackAvailable) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackAvailable
}
func (*DeploymentEventType_RunSteps) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventRunSteps
}
func (*DeploymentEventType_StepResult) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStepResult
}
func (*DeploymentEventType_Error) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventError
}
func (*DeploymentEventType_Done) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventDone
}
func (*DeploymentEventType_Terminated) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTerminated
}
