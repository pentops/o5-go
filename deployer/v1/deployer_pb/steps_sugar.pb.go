// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package deployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// StepOutputType is a oneof wrapper
type StepOutputTypeKey string

const (
	StepOutput_CfStatus StepOutputTypeKey = "cfStatus"
)

func (x *StepOutputType) TypeKey() (StepOutputTypeKey, bool) {
	switch x.Type.(type) {
	case *StepOutputType_CfStatus:
		return StepOutput_CfStatus, true
	default:
		return "", false
	}
}

type IsStepOutputTypeWrappedType interface {
	TypeKey() StepOutputTypeKey
}

func (x *StepOutputType) Set(val IsStepOutputTypeWrappedType) {
	switch v := val.(type) {
	case *StepOutputType_CFStatus:
		x.Type = &StepOutputType_CfStatus{CfStatus: v}
	}
}
func (x *StepOutputType) Get() IsStepOutputTypeWrappedType {
	switch v := x.Type.(type) {
	case *StepOutputType_CfStatus:
		return v.CfStatus
	default:
		return nil
	}
}
func (x *StepOutputType_CFStatus) TypeKey() StepOutputTypeKey {
	return StepOutput_CfStatus
}

type IsStepOutputType_Type = isStepOutputType_Type

// StepRequestType is a oneof wrapper
type StepRequestTypeKey string

const (
	StepRequest_EvalJoin   StepRequestTypeKey = "evalJoin"
	StepRequest_CfCreate   StepRequestTypeKey = "cfCreate"
	StepRequest_CfPlan     StepRequestTypeKey = "cfPlan"
	StepRequest_CfUpdate   StepRequestTypeKey = "cfUpdate"
	StepRequest_CfScale    StepRequestTypeKey = "cfScale"
	StepRequest_PgUpsert   StepRequestTypeKey = "pgUpsert"
	StepRequest_PgEvaluate StepRequestTypeKey = "pgEvaluate"
	StepRequest_PgCleanup  StepRequestTypeKey = "pgCleanup"
	StepRequest_PgMigrate  StepRequestTypeKey = "pgMigrate"
)

func (x *StepRequestType) TypeKey() (StepRequestTypeKey, bool) {
	switch x.Type.(type) {
	case *StepRequestType_EvalJoin_:
		return StepRequest_EvalJoin, true
	case *StepRequestType_CfCreate:
		return StepRequest_CfCreate, true
	case *StepRequestType_CfPlan:
		return StepRequest_CfPlan, true
	case *StepRequestType_CfUpdate:
		return StepRequest_CfUpdate, true
	case *StepRequestType_CfScale:
		return StepRequest_CfScale, true
	case *StepRequestType_PgUpsert:
		return StepRequest_PgUpsert, true
	case *StepRequestType_PgEvaluate:
		return StepRequest_PgEvaluate, true
	case *StepRequestType_PgCleanup:
		return StepRequest_PgCleanup, true
	case *StepRequestType_PgMigrate:
		return StepRequest_PgMigrate, true
	default:
		return "", false
	}
}

type IsStepRequestTypeWrappedType interface {
	TypeKey() StepRequestTypeKey
}

func (x *StepRequestType) Set(val IsStepRequestTypeWrappedType) {
	switch v := val.(type) {
	case *StepRequestType_EvalJoin:
		x.Type = &StepRequestType_EvalJoin_{EvalJoin: v}
	case *StepRequestType_CFCreate:
		x.Type = &StepRequestType_CfCreate{CfCreate: v}
	case *StepRequestType_CFPlan:
		x.Type = &StepRequestType_CfPlan{CfPlan: v}
	case *StepRequestType_CFUpdate:
		x.Type = &StepRequestType_CfUpdate{CfUpdate: v}
	case *StepRequestType_CFScale:
		x.Type = &StepRequestType_CfScale{CfScale: v}
	case *StepRequestType_PGUpsert:
		x.Type = &StepRequestType_PgUpsert{PgUpsert: v}
	case *StepRequestType_PGEvaluate:
		x.Type = &StepRequestType_PgEvaluate{PgEvaluate: v}
	case *StepRequestType_PGCleanup:
		x.Type = &StepRequestType_PgCleanup{PgCleanup: v}
	case *StepRequestType_PGMigrate:
		x.Type = &StepRequestType_PgMigrate{PgMigrate: v}
	}
}
func (x *StepRequestType) Get() IsStepRequestTypeWrappedType {
	switch v := x.Type.(type) {
	case *StepRequestType_EvalJoin_:
		return v.EvalJoin
	case *StepRequestType_CfCreate:
		return v.CfCreate
	case *StepRequestType_CfPlan:
		return v.CfPlan
	case *StepRequestType_CfUpdate:
		return v.CfUpdate
	case *StepRequestType_CfScale:
		return v.CfScale
	case *StepRequestType_PgUpsert:
		return v.PgUpsert
	case *StepRequestType_PgEvaluate:
		return v.PgEvaluate
	case *StepRequestType_PgCleanup:
		return v.PgCleanup
	case *StepRequestType_PgMigrate:
		return v.PgMigrate
	default:
		return nil
	}
}
func (x *StepRequestType_EvalJoin) TypeKey() StepRequestTypeKey {
	return StepRequest_EvalJoin
}
func (x *StepRequestType_CFCreate) TypeKey() StepRequestTypeKey {
	return StepRequest_CfCreate
}
func (x *StepRequestType_CFPlan) TypeKey() StepRequestTypeKey {
	return StepRequest_CfPlan
}
func (x *StepRequestType_CFUpdate) TypeKey() StepRequestTypeKey {
	return StepRequest_CfUpdate
}
func (x *StepRequestType_CFScale) TypeKey() StepRequestTypeKey {
	return StepRequest_CfScale
}
func (x *StepRequestType_PGUpsert) TypeKey() StepRequestTypeKey {
	return StepRequest_PgUpsert
}
func (x *StepRequestType_PGEvaluate) TypeKey() StepRequestTypeKey {
	return StepRequest_PgEvaluate
}
func (x *StepRequestType_PGCleanup) TypeKey() StepRequestTypeKey {
	return StepRequest_PgCleanup
}
func (x *StepRequestType_PGMigrate) TypeKey() StepRequestTypeKey {
	return StepRequest_PgMigrate
}

type IsStepRequestType_Type = isStepRequestType_Type
type IsCloudFormationStackParameter_Source = isCloudFormationStackParameter_Source

// CloudFormationStackParameterType is a oneof wrapper
type CloudFormationStackParameterTypeKey string

const (
	CloudFormationStackParameter_RulePriority CloudFormationStackParameterTypeKey = "rulePriority"
	CloudFormationStackParameter_DesiredCount CloudFormationStackParameterTypeKey = "desiredCount"
)

func (x *CloudFormationStackParameterType) TypeKey() (CloudFormationStackParameterTypeKey, bool) {
	switch x.Type.(type) {
	case *CloudFormationStackParameterType_RulePriority_:
		return CloudFormationStackParameter_RulePriority, true
	case *CloudFormationStackParameterType_DesiredCount_:
		return CloudFormationStackParameter_DesiredCount, true
	default:
		return "", false
	}
}

type IsCloudFormationStackParameterTypeWrappedType interface {
	TypeKey() CloudFormationStackParameterTypeKey
}

func (x *CloudFormationStackParameterType) Set(val IsCloudFormationStackParameterTypeWrappedType) {
	switch v := val.(type) {
	case *CloudFormationStackParameterType_RulePriority:
		x.Type = &CloudFormationStackParameterType_RulePriority_{RulePriority: v}
	case *CloudFormationStackParameterType_DesiredCount:
		x.Type = &CloudFormationStackParameterType_DesiredCount_{DesiredCount: v}
	}
}
func (x *CloudFormationStackParameterType) Get() IsCloudFormationStackParameterTypeWrappedType {
	switch v := x.Type.(type) {
	case *CloudFormationStackParameterType_RulePriority_:
		return v.RulePriority
	case *CloudFormationStackParameterType_DesiredCount_:
		return v.DesiredCount
	default:
		return nil
	}
}
func (x *CloudFormationStackParameterType_RulePriority) TypeKey() CloudFormationStackParameterTypeKey {
	return CloudFormationStackParameter_RulePriority
}
func (x *CloudFormationStackParameterType_DesiredCount) TypeKey() CloudFormationStackParameterTypeKey {
	return CloudFormationStackParameter_DesiredCount
}

type IsCloudFormationStackParameterType_Type = isCloudFormationStackParameterType_Type

// StepStatus
const (
	StepStatus_UNSPECIFIED StepStatus = 0
	StepStatus_BLOCKED     StepStatus = 1
	StepStatus_ACTIVE      StepStatus = 2
	StepStatus_DONE        StepStatus = 3
	StepStatus_FAILED      StepStatus = 4
)

var (
	StepStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "BLOCKED",
		2: "ACTIVE",
		3: "DONE",
		4: "FAILED",
	}
	StepStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"BLOCKED":     1,
		"ACTIVE":      2,
		"DONE":        3,
		"FAILED":      4,
	}
	StepStatus_value_either = map[string]int32{
		"UNSPECIFIED":             0,
		"STEP_STATUS_UNSPECIFIED": 0,
		"BLOCKED":                 1,
		"STEP_STATUS_BLOCKED":     1,
		"ACTIVE":                  2,
		"STEP_STATUS_ACTIVE":      2,
		"DONE":                    3,
		"STEP_STATUS_DONE":        3,
		"FAILED":                  4,
		"STEP_STATUS_FAILED":      4,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StepStatus) ShortString() string {
	return StepStatus_name_short[int32(x)]
}
func (x StepStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StepStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StepStatus_value_either[strVal]
	*x = StepStatus(val)
	return nil
}

// StepOutcome
const (
	StepOutcome_UNSPECIFIED StepOutcome = 0
	StepOutcome_NOP         StepOutcome = 1
	StepOutcome_DOWNTIME    StepOutcome = 2
	StepOutcome_BEFORE      StepOutcome = 3
	StepOutcome_PARALLEL    StepOutcome = 4
)

var (
	StepOutcome_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "NOP",
		2: "DOWNTIME",
		3: "BEFORE",
		4: "PARALLEL",
	}
	StepOutcome_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"NOP":         1,
		"DOWNTIME":    2,
		"BEFORE":      3,
		"PARALLEL":    4,
	}
	StepOutcome_value_either = map[string]int32{
		"UNSPECIFIED":              0,
		"STEP_OUTCOME_UNSPECIFIED": 0,
		"NOP":                      1,
		"STEP_OUTCOME_NOP":         1,
		"DOWNTIME":                 2,
		"STEP_OUTCOME_DOWNTIME":    2,
		"BEFORE":                   3,
		"STEP_OUTCOME_BEFORE":      3,
		"PARALLEL":                 4,
		"STEP_OUTCOME_PARALLEL":    4,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StepOutcome) ShortString() string {
	return StepOutcome_name_short[int32(x)]
}
func (x StepOutcome) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StepOutcome) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StepOutcome_value_either[strVal]
	*x = StepOutcome(val)
	return nil
}

// StepPhase
const (
	StepPhase_UNSPECIFIED StepPhase = 0
	StepPhase_WAIT        StepPhase = 1
	StepPhase_STEPS       StepPhase = 2
)

var (
	StepPhase_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "WAIT",
		2: "STEPS",
	}
	StepPhase_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"WAIT":        1,
		"STEPS":       2,
	}
	StepPhase_value_either = map[string]int32{
		"UNSPECIFIED":            0,
		"STEP_PHASE_UNSPECIFIED": 0,
		"WAIT":                   1,
		"STEP_PHASE_WAIT":        1,
		"STEPS":                  2,
		"STEP_PHASE_STEPS":       2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StepPhase) ShortString() string {
	return StepPhase_name_short[int32(x)]
}
func (x StepPhase) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StepPhase) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StepPhase_value_either[strVal]
	*x = StepPhase(val)
	return nil
}

// CFLifecycle
const (
	CFLifecycle_UNSPECIFIED   CFLifecycle = 0
	CFLifecycle_PROGRESS      CFLifecycle = 1
	CFLifecycle_COMPLETE      CFLifecycle = 2
	CFLifecycle_ROLLING_BACK  CFLifecycle = 3
	CFLifecycle_CREATE_FAILED CFLifecycle = 4
	CFLifecycle_TERMINAL      CFLifecycle = 5
	CFLifecycle_ROLLED_BACK   CFLifecycle = 7
	CFLifecycle_MISSING       CFLifecycle = 6
)

var (
	CFLifecycle_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "PROGRESS",
		2: "COMPLETE",
		3: "ROLLING_BACK",
		4: "CREATE_FAILED",
		5: "TERMINAL",
		7: "ROLLED_BACK",
		6: "MISSING",
	}
	CFLifecycle_value_short = map[string]int32{
		"UNSPECIFIED":   0,
		"PROGRESS":      1,
		"COMPLETE":      2,
		"ROLLING_BACK":  3,
		"CREATE_FAILED": 4,
		"TERMINAL":      5,
		"ROLLED_BACK":   7,
		"MISSING":       6,
	}
	CFLifecycle_value_either = map[string]int32{
		"UNSPECIFIED":                0,
		"CF_LIFECYCLE_UNSPECIFIED":   0,
		"PROGRESS":                   1,
		"CF_LIFECYCLE_PROGRESS":      1,
		"COMPLETE":                   2,
		"CF_LIFECYCLE_COMPLETE":      2,
		"ROLLING_BACK":               3,
		"CF_LIFECYCLE_ROLLING_BACK":  3,
		"CREATE_FAILED":              4,
		"CF_LIFECYCLE_CREATE_FAILED": 4,
		"TERMINAL":                   5,
		"CF_LIFECYCLE_TERMINAL":      5,
		"ROLLED_BACK":                7,
		"CF_LIFECYCLE_ROLLED_BACK":   7,
		"MISSING":                    6,
		"CF_LIFECYCLE_MISSING":       6,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x CFLifecycle) ShortString() string {
	return CFLifecycle_name_short[int32(x)]
}
func (x CFLifecycle) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *CFLifecycle) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := CFLifecycle_value_either[strVal]
	*x = CFLifecycle(val)
	return nil
}
