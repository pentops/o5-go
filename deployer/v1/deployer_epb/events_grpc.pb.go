// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: o5/deployer/v1/events/events.proto

package deployer_epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeployerEventsTopic_DeploymentEvent_FullMethodName = "/o5.deployer.v1.events.DeployerEventsTopic/DeploymentEvent"
	DeployerEventsTopic_StackEvent_FullMethodName      = "/o5.deployer.v1.events.DeployerEventsTopic/StackEvent"
)

// DeployerEventsTopicClient is the client API for DeployerEventsTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployerEventsTopicClient interface {
	DeploymentEvent(ctx context.Context, in *DeploymentEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StackEvent(ctx context.Context, in *StackEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deployerEventsTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployerEventsTopicClient(cc grpc.ClientConnInterface) DeployerEventsTopicClient {
	return &deployerEventsTopicClient{cc}
}

func (c *deployerEventsTopicClient) DeploymentEvent(ctx context.Context, in *DeploymentEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeployerEventsTopic_DeploymentEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerEventsTopicClient) StackEvent(ctx context.Context, in *StackEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeployerEventsTopic_StackEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployerEventsTopicServer is the server API for DeployerEventsTopic service.
// All implementations must embed UnimplementedDeployerEventsTopicServer
// for forward compatibility
type DeployerEventsTopicServer interface {
	DeploymentEvent(context.Context, *DeploymentEventMessage) (*emptypb.Empty, error)
	StackEvent(context.Context, *StackEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeployerEventsTopicServer()
}

// UnimplementedDeployerEventsTopicServer must be embedded to have forward compatible implementations.
type UnimplementedDeployerEventsTopicServer struct {
}

func (UnimplementedDeployerEventsTopicServer) DeploymentEvent(context.Context, *DeploymentEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentEvent not implemented")
}
func (UnimplementedDeployerEventsTopicServer) StackEvent(context.Context, *StackEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StackEvent not implemented")
}
func (UnimplementedDeployerEventsTopicServer) mustEmbedUnimplementedDeployerEventsTopicServer() {}

// UnsafeDeployerEventsTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployerEventsTopicServer will
// result in compilation errors.
type UnsafeDeployerEventsTopicServer interface {
	mustEmbedUnimplementedDeployerEventsTopicServer()
}

func RegisterDeployerEventsTopicServer(s grpc.ServiceRegistrar, srv DeployerEventsTopicServer) {
	s.RegisterService(&DeployerEventsTopic_ServiceDesc, srv)
}

func _DeployerEventsTopic_DeploymentEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerEventsTopicServer).DeploymentEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeployerEventsTopic_DeploymentEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerEventsTopicServer).DeploymentEvent(ctx, req.(*DeploymentEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployerEventsTopic_StackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerEventsTopicServer).StackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeployerEventsTopic_StackEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerEventsTopicServer).StackEvent(ctx, req.(*StackEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployerEventsTopic_ServiceDesc is the grpc.ServiceDesc for DeployerEventsTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployerEventsTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.deployer.v1.events.DeployerEventsTopic",
	HandlerType: (*DeployerEventsTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeploymentEvent",
			Handler:    _DeployerEventsTopic_DeploymentEvent_Handler,
		},
		{
			MethodName: "StackEvent",
			Handler:    _DeployerEventsTopic_StackEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/deployer/v1/events/events.proto",
}
