// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package auth_pb

type IsActor_Type = isActor_Type

// ActorType is a oneof wrapper
type ActorTypeKey string

const (
	Actor_UserAgent ActorTypeKey = "userAgent"
	Actor_ApiClient ActorTypeKey = "apiClient"
)

func (x *ActorType) TypeKey() (ActorTypeKey, bool) {
	switch x.Type.(type) {
	case *ActorType_UserAgent_:
		return Actor_UserAgent, true
	case *ActorType_ApiClient_:
		return Actor_ApiClient, true
	default:
		return "", false
	}
}

type IsActorTypeWrappedType interface {
	TypeKey() ActorTypeKey
}

func (x *ActorType) Set(val IsActorTypeWrappedType) {
	switch v := val.(type) {
	case *ActorType_UserAgent:
		x.Type = &ActorType_UserAgent_{UserAgent: v}
	case *ActorType_ApiClient:
		x.Type = &ActorType_ApiClient_{ApiClient: v}
	}
}
func (x *ActorType) Get() IsActorTypeWrappedType {
	switch v := x.Type.(type) {
	case *ActorType_UserAgent_:
		return v.UserAgent
	case *ActorType_ApiClient_:
		return v.ApiClient
	default:
		return nil
	}
}
func (x *ActorType_UserAgent) TypeKey() ActorTypeKey {
	return Actor_UserAgent
}
func (x *ActorType_ApiClient) TypeKey() ActorTypeKey {
	return Actor_ApiClient
}

type IsActorType_Type = isActorType_Type

// ClientAuthType is a oneof wrapper
type ClientAuthTypeKey string

const (
	ClientAuth_Jwt     ClientAuthTypeKey = "jwt"
	ClientAuth_Session ClientAuthTypeKey = "session"
)

func (x *ClientAuthType) TypeKey() (ClientAuthTypeKey, bool) {
	switch x.Type.(type) {
	case *ClientAuthType_Jwt:
		return ClientAuth_Jwt, true
	case *ClientAuthType_Session:
		return ClientAuth_Session, true
	default:
		return "", false
	}
}

type IsClientAuthTypeWrappedType interface {
	TypeKey() ClientAuthTypeKey
}

func (x *ClientAuthType) Set(val IsClientAuthTypeWrappedType) {
	switch v := val.(type) {
	case *ClientAuthType_JWTAuth:
		x.Type = &ClientAuthType_Jwt{Jwt: v}
	case *ClientAuthType_SessionAuth:
		x.Type = &ClientAuthType_Session{Session: v}
	}
}
func (x *ClientAuthType) Get() IsClientAuthTypeWrappedType {
	switch v := x.Type.(type) {
	case *ClientAuthType_Jwt:
		return v.Jwt
	case *ClientAuthType_Session:
		return v.Session
	default:
		return nil
	}
}
func (x *ClientAuthType_JWTAuth) TypeKey() ClientAuthTypeKey {
	return ClientAuth_Jwt
}
func (x *ClientAuthType_SessionAuth) TypeKey() ClientAuthTypeKey {
	return ClientAuth_Session
}

type IsClientAuthType_Type = isClientAuthType_Type
