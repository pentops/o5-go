// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: o5/dante/v1/service.proto

package dante_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DempeServiceClient is the client API for DempeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DempeServiceClient interface {
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	MessagesAction(ctx context.Context, in *MessagesActionRequest, opts ...grpc.CallOption) (*MessagesActionResponse, error)
}

type dempeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDempeServiceClient(cc grpc.ClientConnInterface) DempeServiceClient {
	return &dempeServiceClient{cc}
}

func (c *dempeServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/o5.dante.v1.DempeService/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dempeServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/o5.dante.v1.DempeService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dempeServiceClient) MessagesAction(ctx context.Context, in *MessagesActionRequest, opts ...grpc.CallOption) (*MessagesActionResponse, error) {
	out := new(MessagesActionResponse)
	err := c.cc.Invoke(ctx, "/o5.dante.v1.DempeService/MessagesAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DempeServiceServer is the server API for DempeService service.
// All implementations must embed UnimplementedDempeServiceServer
// for forward compatibility
type DempeServiceServer interface {
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	MessagesAction(context.Context, *MessagesActionRequest) (*MessagesActionResponse, error)
	mustEmbedUnimplementedDempeServiceServer()
}

// UnimplementedDempeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDempeServiceServer struct {
}

func (UnimplementedDempeServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedDempeServiceServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedDempeServiceServer) MessagesAction(context.Context, *MessagesActionRequest) (*MessagesActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAction not implemented")
}
func (UnimplementedDempeServiceServer) mustEmbedUnimplementedDempeServiceServer() {}

// UnsafeDempeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DempeServiceServer will
// result in compilation errors.
type UnsafeDempeServiceServer interface {
	mustEmbedUnimplementedDempeServiceServer()
}

func RegisterDempeServiceServer(s grpc.ServiceRegistrar, srv DempeServiceServer) {
	s.RegisterService(&DempeService_ServiceDesc, srv)
}

func _DempeService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DempeServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.dante.v1.DempeService/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DempeServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DempeService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DempeServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.dante.v1.DempeService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DempeServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DempeService_MessagesAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DempeServiceServer).MessagesAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/o5.dante.v1.DempeService/MessagesAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DempeServiceServer).MessagesAction(ctx, req.(*MessagesActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DempeService_ServiceDesc is the grpc.ServiceDesc for DempeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DempeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.dante.v1.DempeService",
	HandlerType: (*DempeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMessages",
			Handler:    _DempeService_ListMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _DempeService_GetMessage_Handler,
		},
		{
			MethodName: "MessagesAction",
			Handler:    _DempeService_MessagesAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/dante/v1/service.proto",
}
