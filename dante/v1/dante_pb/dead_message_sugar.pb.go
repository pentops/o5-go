// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package dante_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

type IsDeadMessage_Problem = isDeadMessage_Problem

// Urgency
const (
	Urgency_UNSPECIFIED Urgency = 0
	Urgency_LOW         Urgency = 1
	Urgency_MEDIUM      Urgency = 2
	Urgency_HIGH        Urgency = 3
)

var (
	Urgency_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	Urgency_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"LOW":         1,
		"MEDIUM":      2,
		"HIGH":        3,
	}
	Urgency_value_either = map[string]int32{
		"UNSPECIFIED":         0,
		"URGENCY_UNSPECIFIED": 0,
		"LOW":                 1,
		"URGENCY_LOW":         1,
		"MEDIUM":              2,
		"URGENCY_MEDIUM":      2,
		"HIGH":                3,
		"URGENCY_HIGH":        3,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x Urgency) ShortString() string {
	return Urgency_name_short[int32(x)]
}
func (x Urgency) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *Urgency) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := Urgency_value_either[strVal]
	*x = Urgency(val)
	return nil
}
