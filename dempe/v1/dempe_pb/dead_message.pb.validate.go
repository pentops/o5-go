// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: o5/dempe/v1/dead_message.proto

package dempe_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _dead_message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DeadMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeadMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeadMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeadMessageMultiError, or
// nil if none found.
func (m *DeadMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *DeadMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InfraMessageId

	if err := m._validateUuid(m.GetMessageId()); err != nil {
		err = DeadMessageValidationError{
			field:  "MessageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for QueueName

	// no validation rules for GrpcName

	if all {
		switch v := interface{}(m.GetRejectedTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "RejectedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "RejectedTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRejectedTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeadMessageValidationError{
				field:  "RejectedTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInitialSentTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "InitialSentTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "InitialSentTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitialSentTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeadMessageValidationError{
				field:  "InitialSentTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeadMessageValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeadMessageValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Problem.(type) {
	case *DeadMessage_InvariantViolation:
		if v == nil {
			err := DeadMessageValidationError{
				field:  "Problem",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInvariantViolation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeadMessageValidationError{
						field:  "InvariantViolation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeadMessageValidationError{
						field:  "InvariantViolation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInvariantViolation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeadMessageValidationError{
					field:  "InvariantViolation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeadMessage_UnhandledError:
		if v == nil {
			err := DeadMessageValidationError{
				field:  "Problem",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUnhandledError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeadMessageValidationError{
						field:  "UnhandledError",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeadMessageValidationError{
						field:  "UnhandledError",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnhandledError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeadMessageValidationError{
					field:  "UnhandledError",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DeadMessageMultiError(errors)
	}

	return nil
}

func (m *DeadMessage) _validateUuid(uuid string) error {
	if matched := _dead_message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeadMessageMultiError is an error wrapping multiple validation errors
// returned by DeadMessage.ValidateAll() if the designated constraints aren't met.
type DeadMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeadMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeadMessageMultiError) AllErrors() []error { return m }

// DeadMessageValidationError is the validation error returned by
// DeadMessage.Validate if the designated constraints aren't met.
type DeadMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeadMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeadMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeadMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeadMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeadMessageValidationError) ErrorName() string { return "DeadMessageValidationError" }

// Error satisfies the builtin error interface
func (e DeadMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeadMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeadMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeadMessageValidationError{}

// Validate checks the field values on InvariantViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvariantViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvariantViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvariantViolationMultiError, or nil if none found.
func (m *InvariantViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *InvariantViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvariantViolationValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvariantViolationValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvariantViolationValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Urgency

	if len(errors) > 0 {
		return InvariantViolationMultiError(errors)
	}

	return nil
}

// InvariantViolationMultiError is an error wrapping multiple validation errors
// returned by InvariantViolation.ValidateAll() if the designated constraints
// aren't met.
type InvariantViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvariantViolationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvariantViolationMultiError) AllErrors() []error { return m }

// InvariantViolationValidationError is the validation error returned by
// InvariantViolation.Validate if the designated constraints aren't met.
type InvariantViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvariantViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvariantViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvariantViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvariantViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvariantViolationValidationError) ErrorName() string {
	return "InvariantViolationValidationError"
}

// Error satisfies the builtin error interface
func (e InvariantViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvariantViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvariantViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvariantViolationValidationError{}

// Validate checks the field values on UnhandledError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnhandledError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnhandledError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnhandledErrorMultiError,
// or nil if none found.
func (m *UnhandledError) ValidateAll() error {
	return m.validate(true)
}

func (m *UnhandledError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return UnhandledErrorMultiError(errors)
	}

	return nil
}

// UnhandledErrorMultiError is an error wrapping multiple validation errors
// returned by UnhandledError.ValidateAll() if the designated constraints
// aren't met.
type UnhandledErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnhandledErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnhandledErrorMultiError) AllErrors() []error { return m }

// UnhandledErrorValidationError is the validation error returned by
// UnhandledError.Validate if the designated constraints aren't met.
type UnhandledErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnhandledErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnhandledErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnhandledErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnhandledErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnhandledErrorValidationError) ErrorName() string { return "UnhandledErrorValidationError" }

// Error satisfies the builtin error interface
func (e UnhandledErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnhandledError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnhandledErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnhandledErrorValidationError{}

// Validate checks the field values on Any with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Any) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Any with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AnyMultiError, or nil if none found.
func (m *Any) ValidateAll() error {
	return m.validate(true)
}

func (m *Any) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProto()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnyValidationError{
					field:  "Proto",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnyValidationError{
					field:  "Proto",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnyValidationError{
				field:  "Proto",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Json

	if len(errors) > 0 {
		return AnyMultiError(errors)
	}

	return nil
}

// AnyMultiError is an error wrapping multiple validation errors returned by
// Any.ValidateAll() if the designated constraints aren't met.
type AnyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnyMultiError) AllErrors() []error { return m }

// AnyValidationError is the validation error returned by Any.Validate if the
// designated constraints aren't met.
type AnyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyValidationError) ErrorName() string { return "AnyValidationError" }

// Error satisfies the builtin error interface
func (e AnyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAny.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyValidationError{}
