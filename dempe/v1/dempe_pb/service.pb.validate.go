// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: o5/dempe/v1/service.proto

package dempe_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessagesRequestMultiError, or nil if none found.
func (m *ListMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMessagesRequestMultiError(errors)
	}

	return nil
}

// ListMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by ListMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessagesRequestMultiError) AllErrors() []error { return m }

// ListMessagesRequestValidationError is the validation error returned by
// ListMessagesRequest.Validate if the designated constraints aren't met.
type ListMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessagesRequestValidationError) ErrorName() string {
	return "ListMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessagesRequestValidationError{}

// Validate checks the field values on ListMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessagesResponseMultiError, or nil if none found.
func (m *ListMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMessagesResponseMultiError(errors)
	}

	return nil
}

// ListMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by ListMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessagesResponseMultiError) AllErrors() []error { return m }

// ListMessagesResponseValidationError is the validation error returned by
// ListMessagesResponse.Validate if the designated constraints aren't met.
type ListMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessagesResponseValidationError) ErrorName() string {
	return "ListMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessagesResponseValidationError{}

// Validate checks the field values on GetMessageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageRequestMultiError, or nil if none found.
func (m *GetMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetMessageId(); wrapper != nil {

		if err := m._validateUuid(wrapper.GetValue()); err != nil {
			err = GetMessageRequestValidationError{
				field:  "MessageId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetMessageRequestMultiError(errors)
	}

	return nil
}

func (m *GetMessageRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMessageRequestMultiError is an error wrapping multiple validation errors
// returned by GetMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageRequestMultiError) AllErrors() []error { return m }

// GetMessageRequestValidationError is the validation error returned by
// GetMessageRequest.Validate if the designated constraints aren't met.
type GetMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageRequestValidationError) ErrorName() string {
	return "GetMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageRequestValidationError{}

// Validate checks the field values on CapturedMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CapturedMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapturedMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapturedMessageMultiError, or nil if none found.
func (m *CapturedMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *CapturedMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCause()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapturedMessageValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapturedMessageValidationError{
					field:  "Cause",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCause()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapturedMessageValidationError{
				field:  "Cause",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CapturedMessageMultiError(errors)
	}

	return nil
}

// CapturedMessageMultiError is an error wrapping multiple validation errors
// returned by CapturedMessage.ValidateAll() if the designated constraints
// aren't met.
type CapturedMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapturedMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapturedMessageMultiError) AllErrors() []error { return m }

// CapturedMessageValidationError is the validation error returned by
// CapturedMessage.Validate if the designated constraints aren't met.
type CapturedMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapturedMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapturedMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapturedMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapturedMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapturedMessageValidationError) ErrorName() string { return "CapturedMessageValidationError" }

// Error satisfies the builtin error interface
func (e CapturedMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapturedMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapturedMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapturedMessageValidationError{}

// Validate checks the field values on GetMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageResponseMultiError, or nil if none found.
func (m *GetMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessageResponseValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessageResponseValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessageResponseValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessageResponseMultiError(errors)
	}

	return nil
}

// GetMessageResponseMultiError is an error wrapping multiple validation errors
// returned by GetMessageResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageResponseMultiError) AllErrors() []error { return m }

// GetMessageResponseValidationError is the validation error returned by
// GetMessageResponse.Validate if the designated constraints aren't met.
type GetMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageResponseValidationError) ErrorName() string {
	return "GetMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageResponseValidationError{}

// Validate checks the field values on MessageAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageActionMultiError, or
// nil if none found.
func (m *MessageAction) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Note

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageActionValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageActionValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageActionValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageActionValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageActionValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageActionValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Action.(type) {
	case *MessageAction_Delete:
		if v == nil {
			err := MessageActionValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageActionValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageAction_Requeue:
		if v == nil {
			err := MessageActionValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequeue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Requeue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Requeue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequeue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageActionValidationError{
					field:  "Requeue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageAction_Edit:
		if v == nil {
			err := MessageActionValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEdit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Edit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageActionValidationError{
						field:  "Edit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEdit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageActionValidationError{
					field:  "Edit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MessageActionMultiError(errors)
	}

	return nil
}

// MessageActionMultiError is an error wrapping multiple validation errors
// returned by MessageAction.ValidateAll() if the designated constraints
// aren't met.
type MessageActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionMultiError) AllErrors() []error { return m }

// MessageActionValidationError is the validation error returned by
// MessageAction.Validate if the designated constraints aren't met.
type MessageActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionValidationError) ErrorName() string { return "MessageActionValidationError" }

// Error satisfies the builtin error interface
func (e MessageActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionValidationError{}

// Validate checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionRequestMultiError, or nil if none found.
func (m *MessageActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	if all {
		switch v := interface{}(m.GetAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageActionRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageActionRequestValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageActionRequestValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MessageActionRequestMultiError(errors)
	}

	return nil
}

// MessageActionRequestMultiError is an error wrapping multiple validation
// errors returned by MessageActionRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionRequestMultiError) AllErrors() []error { return m }

// MessageActionRequestValidationError is the validation error returned by
// MessageActionRequest.Validate if the designated constraints aren't met.
type MessageActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionRequestValidationError) ErrorName() string {
	return "MessageActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionRequestValidationError{}

// Validate checks the field values on ActionDelete with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionDelete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionDelete with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionDeleteMultiError, or
// nil if none found.
func (m *ActionDelete) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionDelete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActionDeleteMultiError(errors)
	}

	return nil
}

// ActionDeleteMultiError is an error wrapping multiple validation errors
// returned by ActionDelete.ValidateAll() if the designated constraints aren't met.
type ActionDeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionDeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionDeleteMultiError) AllErrors() []error { return m }

// ActionDeleteValidationError is the validation error returned by
// ActionDelete.Validate if the designated constraints aren't met.
type ActionDeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionDeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionDeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionDeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionDeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionDeleteValidationError) ErrorName() string { return "ActionDeleteValidationError" }

// Error satisfies the builtin error interface
func (e ActionDeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionDelete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionDeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionDeleteValidationError{}

// Validate checks the field values on ActionRequeue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionRequeue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionRequeue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionRequeueMultiError, or
// nil if none found.
func (m *ActionRequeue) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionRequeue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActionRequeueMultiError(errors)
	}

	return nil
}

// ActionRequeueMultiError is an error wrapping multiple validation errors
// returned by ActionRequeue.ValidateAll() if the designated constraints
// aren't met.
type ActionRequeueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionRequeueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionRequeueMultiError) AllErrors() []error { return m }

// ActionRequeueValidationError is the validation error returned by
// ActionRequeue.Validate if the designated constraints aren't met.
type ActionRequeueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionRequeueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionRequeueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionRequeueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionRequeueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionRequeueValidationError) ErrorName() string { return "ActionRequeueValidationError" }

// Error satisfies the builtin error interface
func (e ActionRequeueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionRequeue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionRequeueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionRequeueValidationError{}

// Validate checks the field values on ActionEdit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ActionEdit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionEdit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActionEditMultiError, or
// nil if none found.
func (m *ActionEdit) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionEdit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewMessageJson

	if len(errors) > 0 {
		return ActionEditMultiError(errors)
	}

	return nil
}

// ActionEditMultiError is an error wrapping multiple validation errors
// returned by ActionEdit.ValidateAll() if the designated constraints aren't met.
type ActionEditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionEditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionEditMultiError) AllErrors() []error { return m }

// ActionEditValidationError is the validation error returned by
// ActionEdit.Validate if the designated constraints aren't met.
type ActionEditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionEditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionEditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionEditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionEditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionEditValidationError) ErrorName() string { return "ActionEditValidationError" }

// Error satisfies the builtin error interface
func (e ActionEditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionEdit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionEditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionEditValidationError{}

// Validate checks the field values on MessageActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionResponseMultiError, or nil if none found.
func (m *MessageActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MessageActionResponseMultiError(errors)
	}

	return nil
}

// MessageActionResponseMultiError is an error wrapping multiple validation
// errors returned by MessageActionResponse.ValidateAll() if the designated
// constraints aren't met.
type MessageActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionResponseMultiError) AllErrors() []error { return m }

// MessageActionResponseValidationError is the validation error returned by
// MessageActionResponse.Validate if the designated constraints aren't met.
type MessageActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionResponseValidationError) ErrorName() string {
	return "MessageActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionResponseValidationError{}
